@import url('https://fonts.googleapis.com/css?family=Work+Sans:300,400,500,600,700,800,900');

*
{
  margin: 0;
  padding: 0;
  /* This is more like a traditional application than a website, so I'll go with
   * the default cursor, not a pointer. */
  cursor: default;
}

*:focus
{
  /* Remove blue border on input elements. */
  outline: none;
}

html
{
  font-size: 16px;
  font-family: 'Work Sans';
  line-height: 1.5em;
  height: 100vh;
}

::-webkit-scrollbar {
  width: 0.5em;
}

::-webkit-scrollbar-track {
  background: linear-gradient(
    90deg,
    rgba(0, 0, 0, 0.00)  0%,
    rgba(0, 0, 0, 0.02) 90%
  );
}

::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.1);
}

body {
  color: black;
  display: grid;

  /* NOTE: The 100vh unit has a peculiar behavior on Chrome: it refers to the
   * minimal viewport height; the size of the viewport when the address bar is
   * visible. But when the address bar is hidden, we get this extra area below
   * the viewport. Setting 'position' to 'fixed' changes this behavior so 100vh
   * always refers to the current viewport height. It took me some further
   * fiddling, but with 100vh on the outer <html> element, and 100% height +
   * position fixed here, it finally has the right height on mobile. See also
   * https://developers.google.com/web/updates/2016/12/url-bar-resizing. */
  position: fixed;
  width: 100vw;
  height: 100%;

  grid-template-columns: auto;
  grid-template-rows: 2.4em auto 5em;
  grid-template-areas:
    "navbar"
    "content"
    "statusbar"
  ;
}

#navbar {
  grid-area: navbar;
  border-bottom: 1pt solid #eee;
  display: grid;
  grid-auto-flow: column;
}

.nav-tab {
  color: #999;
  padding: 0.5em;
  transition: color 0.1s ease-out, border-color 0.1s ease-out;
  border-bottom: 0.2rem solid transparent;

  text-align: center;
  font-size: 0.75rem;
}

.nav-tab.active {
  color: #555;
  border-bottom: 0.2rem solid #ccc;
}

.pane {
  grid-area: content;
  width: 100%;
  height: 100%;
  overflow: hidden;
  opacity: 1.0;
  transform-origin: center;
  /* background-color: #fff; */
  transition: transform 0.1s ease-in-out, opacity 0.1s ease-in-out;
  will-change: transform;
}

.pane.in {
  transform: scale(0.91);
  opacity: 0.0;
}

.pane.out {
  transform: scale(1.1);
  opacity: 0.0;
}

.pane.inactive {
  display: none !important;
}

.album-list-view {
  height: 100%;
  overflow-y: scroll;
}

#album-view {
  height: 100%;
  overflow-y: scroll;
  display: grid;
  grid-template-columns: auto;
  grid-template-rows: auto auto;
  grid-template-areas:
    "album-info"
    "track-list"
  ;
}

a
{
  color: inherit;
  text-decoration: none;
}

/* Initial loading animation. */

#loader
{
  position: absolute;
  top: 50%;
  left: 50%;
}

#loader > p
{
  margin-left: -5em;
  width: 10em;
  text-align: center;
  margin-top: 2rem;
  font-size: 0.8em;
  color: #aaa;
}

.spinner > div
{
  position: absolute;
  margin-left: -1.3em;
  margin-top: -1.3em;
  width: 2em;
  height: 2em;
  border-radius: 50%;
  border: 0.3em solid;
  border-color: #ccc transparent transparent transparent;
  animation: spinner 1.4s cubic-bezier(0.6, 0, 0.4, 1) infinite;
}

.spinner > div:nth-child(2)
{
  animation-delay: 0.7s;
}

@keyframes spinner
{
  0%   { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

button {
  font-family: inherit;
  font-size: inherit;
  color: #888;
  background-color: transparent;
  border: none;
}

ul
{
  list-style-type: none;
}

#album-list
{
  padding-bottom: 1em;
  position: relative;
}

#album-list li
{
  cursor: default;
  position: absolute;
  width: 100%;
}

.album, .track
{
  padding-top: 1em;
  display: grid;
  padding-left: 1em;
  padding-right: 1em;
  grid-column-gap: 0.75em;
  grid-template-columns: 3em 1fr;
  grid-template-rows: 1.5em 1.5em;
  grid-template-areas:
    "number   title"
    "duration artist"
  ;
}

/* Leave some whitespace between tracks on different disks. */
.disc + .disc {
  margin-top: 2.5rem;
}

img.thumb
{
  width: 3em;
  height: 3em;
  /* On a slow network, or when scrolling quickly, the thumbs can take some time
   * to load. By adding a background color, we get a grey square that acts as a
   * placeholder for the real album art. */
  background-color: #f8f8f8;
}

.title,
#album-list .artist,
.track-list .artist,
#search-artists .name,
#search-albums .artist,
#search-tracks .artist
{
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

.title { grid-area: title }
.artist { grid-area: artist }

.album .title
{
  font-weight: 600;
}

.album .date
{
  padding-left: 0.2em;
  color: #ccc;
}

.track-list
{
  grid-area: track-list;

  margin-top: 1em;
  padding-top: 1.5em;
  padding-bottom: 1.5rem;
  background-color: #fdfdfd;
  border-top: 0.8pt solid #eee;
}

.track-list .track
{
  padding-top: 0.5em;
}

.duration, .track-number
{
  text-align: right;
  padding-right: 0.25em;
  color: #ccc;
}

.track-number
{
  grid-area: number;
  font-weight: 700;
  transition: color 0.2s ease-in-out;
}

.duration
{
  grid-area: duration;
  font-size: 0.75rem;
}

.track .artist
{
  font-size: 0.75rem;
  color: #aaa;
}

.track-number::before
{
  /* NOTE: Could use svg background images with icons in the future. */
  content: '• ';
  color: transparent;
  transition: color 0.3s ease-in-out;
}

.queueing .track-number, .queueing .track-number::before
{
  color: #ccc;
}

.queued .track-number, .queued .track-number::before
{
  color: #999;
}

#search-pane {
  display: grid;
  grid-template-columns: auto;
  grid-template-rows: 4em auto;
  grid-template-areas:
    "search-box"
    "result-box"
  ;
}

#search-box
{
  background: transparent;
  border: none;
  border-bottom: 0.8pt solid #eee;
  font: inherit;
  grid-area: search-box;
  padding: 1.5em;
  width: 100%;
}

#search-results
{
  grid-area: result-box;
  padding-bottom: 1em;
  overflow-y: auto;
}

#search-results div
{
  overflow: hidden;
}

#search-results h2
{
  font-variant-caps: all-small-caps;
  letter-spacing: 0.2em;
  font-weight: 600;
  font-size: 1em;
  margin-top: 1em;
  margin-left: 1em;
  color: #ccc;
}

#search-artists li
{
  padding-left: 1em;
  padding-right: 1em;
  padding-top: 1em;
}

#search-artists .discography
{
  white-space: nowrap;
  overflow: hidden;
}

#search-artists .discography img
{
  height: 1.5em;
  margin-right: 0.2em;
  position: relative;
  top: 0.1em;
}

.album-info {
  grid-area: album-info;
  padding: 1em;
  position: relative;
}

.album-info .cover {
  width: calc(100% - 7.5em);
  margin: 3.75em;
  position: relative;
  max-width: 20rem;
  margin-left: auto;
  margin-right: auto;
  /* Ensure the container is square even when the image is missing. */
  aspect-ratio: 1/1;

  /* Limit the size of the element to avoid Chrome for allocating a larger-than-
   * necessary compositing layer for it. */
  overflow: hidden;
}

.album-info .cover img {
  position: absolute;
  width: 100%;
  /* Stretch covers to be square, if need be. */
  height: 100%;
  top: 0;
  left: 0;
  border-radius: 0.15rem;
}

.album-info .cover img.lowres {
  /* Like in the album list view, add a background color that acts as a
   * placeholder, to show a square when the page is still loading. This does not
   * block the backdrop, because that one uses the same source, so both should
   * load at the same time. */
  background-color: #f8f8f8;

  /* When css aspect-ratio (on the parent container) is not supported,
   * the cover art disappears, but we can fix that with the following
   * rules. By making one of the three images position:relative, the
   * parent container doesn’t collapse. */
  position: relative;
  height: auto;
}

.album-info .cover img.backdrop {
  filter: contrast(0.8) saturate(1.5) brightness(0.9) blur(1.2rem);
  opacity: 0.4;
  transform: translateY(0.3rem);
}

.album-info hgroup, .album-info .album-actions {
  margin-left: 3rem;
  margin-right: 3rem;
}

.album-info h1 {
  font-weight: 600;
  font-size: 1.5em;
  line-height: 1.1em;
  margin-top:  5rem;
  margin-left: 0.75rem;
  overflow: hidden;
  text-overflow: ellipsis;
}

.album-info h2 {
  font-weight: 400;
  font-size: 1em;
  margin-top: 0.5rem;
  margin-left: 0.75rem;
  color: #bbb;
  word-spacing: 0.2em;
}

.album-info .artist {
  color: black;
  word-spacing: 0;
}

/* For now-playing, we set the artist and album title over two lines. */
.current .album-info .album-title {
  margin-top: 0.3em;
  word-spacing: 0;
  color: black;
}

#album-view .album-actions {
  padding-top: 1rem;
}

.album-info button {
  color: #888;
  display: block;
  position: relative;
  padding-left: 0.75rem;
  padding-top: 1rem;
}

button::before {
  color: #ccc;
  width: 1em;
  left: -0.75rem;
  position: absolute;
  font-weight: 700;
}

button.enqueue::before {
  content: "↳";
}

button.play-next::before {
  content: "↱";
}

#statusbar {
  grid-area: statusbar;
  border-top: 0.8pt solid rgba(0, 0, 0, 0.065);
  background-color: rgba(252, 251, 251, 0.92);
  position: relative;
}

#statusbar .current-track {
  position: absolute;
  top: 0;
  width: 100%;
  opacity: 1.0;
  transition: opacity 0.15s ease-in-out;
  /* Allow the buttons to go in front, when needed. */
  z-index: 1;
}

#statusbar .current-track.fade-in {
  opacity: 0.0;
}

#statusbar .current-track.fade-out {
  opacity: 0.0;
}

#statusbar .progress {
  position: absolute;
  top: -1.2pt;
  height: 1.6pt;
  width: 100%;
  background: linear-gradient(
    90deg,
    #eee 0% 33%,
    #ccc 93%,
    #bbb 100%
  );
}

#statusbar .track-info {
  padding: 1rem;
  display: grid;
  grid-column-gap: 0.75em;
  grid-template-columns: 3em 1fr;
  grid-template-rows: 1.5em 1.5em;
  grid-template-areas:
    "thumb title"
    "thumb artist"
  ;
  transition: transform 0.15s ease-in-out;
  transform: translateX(0);
}

#statusbar .current-track.fade-in .track-info {
  transform: translateX(1em);
}

#statusbar .current-track.fade-out .track-info {
  transform: translateX(-1em);
}

#statusbar .thumb {
  grid-area: thumb;
  transition: opacity 0.2s ease-in-out;
}

#statusbar .artist {
  font-size: 0.75rem;
  color: #777;
}

#statusbar .spinner {
  grid-area: thumb;
  position: relative;
  left: 50%;
  top: 50%;
  z-index: -1;
  /* Hidden, unless .blocked, to avoid having to render the animations. */
  display: none;
}

#statusbar .blocked .spinner {
  display: block;
}

#statusbar .blocked .thumb {
  opacity: 0;
}

#current-pane {
  display: grid;
  grid-template-columns: auto;
  grid-template-rows: auto 4em;
  grid-template-areas:
    "current"
    "volume-controls"
  ;
  overflow-y: auto;
}

.current {
  grid-area: current;
  margin-bottom: 2em;
}

.current .nothing-playing {
  text-align: center;
  color: #aaa;
  position: relative;
  top: 50%;
}

.volume-controls {
  grid-area: volume-controls;
  display: grid;
  grid-template-columns: 4em auto 4em;
  grid-template-rows: auto;
  grid-template-areas:
    "volume-down volume-bar volume-up"
  ;
}

.volume-controls button {
  width: 4em;
}

button.volume-down { grid-area: volume-down; }
button.volume-up { grid-area: volume-up; }

.volume-controls .indicator {
  grid-area: volume-bar;
  margin-top: calc(2em - 1pt);
  height: 2pt;
  background-color: #f7f7f7;
}

.volume-controls .indicator > div {
  position: relative;
  width: 50%;
  height: 2pt;
  background: linear-gradient(
    90deg,
    #ddd 0%,
    #ccc 100%
  );
  transition: width 0.1s ease-in-out;
}

.volume-controls .volume-label {
  position: absolute;
  top: -2rem;
  right: -2.5rem;
  width: 5rem;
  text-align: center;
  color: #bbb;
}

/* On very narrow viewports, squeeze the text a bit. */
@media (max-width: 25rem) {
  .nav-tab { letter-spacing: 0.5; }
}

/* At 40rem width, we get a bit more room to put things side by side rather than
 * above each other, to take advantage of the wider viewport. */
@media (min-width: 40rem) {
  /* Move the navigation bar from top to left, it becomes a sidebar. */
  body {
    grid-template-columns: 9em auto;
    grid-template-rows: auto 5em;
    grid-template-areas:
      "navbar    content"
      "statusbar statusbar"
    ;
  }

  #navbar {
    border-bottom: none;
    border-right: 1pt solid #eee;
    padding-top: 0.5em;
    padding-left: 0.5em;
    /* Switch from grid for horizontal distribution,
     * to block for just filling up from top to bottom. */
    display: block;
  }

  .nav-tab {
    text-align: left;
    font-size: inherit;
    text-transform: inherit;
    letter-spacing: inherit;
    font-weight: inherit;
    border-right: 0.2em solid transparent;
    border-bottom: none;

    /* For some reason there are white pixels between the nav area border,
     * and the highlight border-right. Fix that by moving everything a bit
     * to the right. */
    position: relative;
    left: 0.1em;
  }

  .nav-tab.active {
    border-bottom: none;
    border-right: 0.2em solid #ccc;

    /* Focus more with weight than color. For the horizontal tabs, using
     * weight disturbs the lay-out, but for these vertical tabs, it is
     * fine. */
    font-weight: 600;
    color: #777;
  }


  /* Limit the width of the volume bar, there is no point in stretching it out
   * too much. */
  .volume-controls {
    grid-template-columns: auto 4em 18em 4em auto;
    grid-template-areas:
      "pad-left volume-down volume-bar volume-up pad-right"
    ;
  }
}

/* At 50rem width, we put the track list to the right of the album info, instead
 * of below the album info. */
@media (min-width: 50rem) {
  #album-view {
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto;
    grid-template-areas:
      "album-info track-list"
    ;
  }

  #album-view .cover {
    max-width: none;
  }

  .album-info h1 {
    /* When the cover could be centered above the title, we need plenty of
     * whitespace to not make it look weird, but when it is aligned to the
     * borders, we can do with less. */
    margin-top: 0;
  }

  .track-list {
    margin-top: 0;
    padding-top: 4rem;
    padding-left: 1rem;
    padding-bottom: 2.5rem;
    border-top: none;
    border-left: 0.8pt solid #eee;
  }

  /* We can also start to render search results in three columns next to each
   * other, instead of below one another. */
  .search-results-list {
    display: grid;
    grid-template-columns: 3fr 3fr 3fr;
  }

  #search-results div:first-child {
    grid-column: 1;
  }

  /* For the now playing view, we can put the cover art and title side by side. */
  #current-pane {
    grid-template-rows: auto auto auto 4em;
    grid-template-areas:
      "pad-top"
      "current"
      "pad-bottom"
      "volume-controls"
    ;
  }

  .current {
    margin-bottom: 0;
  }

  .current .album-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto;
    grid-template-areas:
      "cover info"
    ;
  }

  .current .album-info .cover {
    grid-area: cover;
    margin-right: 1em;
  }

  .current .album-info hgroup {
    grid-area: info;
    margin-left: 1em;
    padding-top: 11rem;
  }

  .current .album-info h1 {
    margin-top: 0;
  }
}

@media (min-width: 70rem) {
  /* Add a bit of padding around the search results, so they arent' too wide,
   * which looks unnatural. */
  .search-results-list {
    display: grid;
    grid-template-columns: 2fr 3fr 3fr 3fr 2fr;
  }

  #search-results div:first-child {
    grid-column: 2;
  }

  #search-box {
    /* 2/13 to match the grid, 1em padding. */
    padding-left: calc(1em + (200% / 13));
  }
}

/* At this width, we can devote a bit more space to th album list, and we
 * set a limit on the width of the album info column. */
@media (min-width: 75rem) {
  #album-view {
    grid-template-columns: 4fr 35rem 35rem 3fr;
    grid-template-areas:
      "pad-left album-info track-list track-list"
    ;
  }

  .album-info h1 {
    font-size: 1.7rem;
  }
}

@media (min-width: 90rem) {
{
  .search-results-list {
    display: grid;
    grid-template-columns: 3fr 3fr 3fr 3fr 3fr;
  }

  #search-box {
    /* 3/15 to match the grid, 1em padding. */
    padding-left: calc(1em + (300% / 15));
  }
}
